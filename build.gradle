plugins {
    id 'scala'
    id 'maven-publish'
    id 'signing'
    id 'com.github.maiflai.scalatest' version '0.26'
}

group 'io.github.iltotore'
version '1.0'

Properties localProperties = new Properties()
localProperties.load(rootProject.file('local.properties').newDataInputStream())

for(Map.Entry<String, ?> entry : localProperties.entrySet()){
    project.ext[entry.getKey()] = entry.getValue()
}

ext {
    scalaVersion = '2.13.1'
}


repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation scalaLib()
    implementation scalaModule('scala-collection-contrib', '0.2.1')
    testImplementation scalaDependency('org.scalatest', 'scalatest', '3.1.1')
}

compileScala.options.encoding = compileJava.options.encoding = compileTestScala.options.encoding = compileTestJava.options.encoding = 'UTF-8'

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenScala(MavenPublication) {
            artifactId = 'ucp_' + getMajorScalaVersion()

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('implementation')
                }
            }

            repositories {
                maven {
                    url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                    credentials {
                        username = "Il_totore"
                        password = System.getenv("SONATYPE_PASSWORD")
                    }
                }
            }

            pom {
                name = 'UniversalCommandParser'
                description = 'A flexible command system written in Scala.'
                url = 'https://github.com/Iltotore/UCP'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'iltotore'
                        name = 'Il_totore'
                        email = 'rafbodaha@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/Iltotore/UCP.git'
                    developerConnection = 'scm:git:ssh://github.com/Iltotore/UCP.git'
                    url = 'https://github.com/Iltotore/UCP.git'
                }
            }

            from components.java
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.mavenScala
}


def getMajorScalaVersion() {
    String[] parts = scalaVersion.tokenize('.')
    return parts[0] + '.' + parts[1]
}

def scalaModule(String name, String version) {
    return scalaDependency('org.scala-lang.modules', name, version)
}

def scalaDependency(String company, String name, String version) {
    return company + ':' + name + '_' + getMajorScalaVersion() + ':' + version
}

def scalaLib() {
    return 'org.scala-lang:scala-library:' + scalaVersion
}

task spec(dependsOn: ['testClasses'], type: JavaExec) {
    main = 'org.scalatest.tools.Runner'
    args = ['-R', 'build/classes/scala/test', '-o']
    jvmArgs = ['-Dfile.encoding="UTF-8"']
    classpath = sourceSets.test.runtimeClasspath
    group 'verification'
}

test {
    enabled = false
    finalizedBy spec
}